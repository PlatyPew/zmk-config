#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE SPACE>; };

/ {
    behaviors {
        click: click {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&mkp LCLK>, <&mkp RCLK>, <&mkp MCLK>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47 43 44 42>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;

            tapping-term-ms = <500>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        m0: m0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M0";
        };

        m1: m1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M1";
        };

        m2: m2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M2";
        };

        m3: m3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M3";
        };

        m4: m4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "M4";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        enter {
            bindings = <&kp RETURN>;
            key-positions = <3 4>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <30 32>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <30 31>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <31 32>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        backspace {
            bindings = <&kp BSPC>;
            key-positions = <8 9>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <9 10>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        left_paren {
            bindings = <&lpar_lt>;
            key-positions = <23 24>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        right_paren {
            bindings = <&rpar_gt>;
            key-positions = <24 25>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        left_brack {
            bindings = <&kp LBKT>;
            key-positions = <37 38>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        right_brack {
            bindings = <&kp RBKT>;
            key-positions = <38 39>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        exclaim {
            bindings = <&kp EXCL>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 15>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 16>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        dollar {
            bindings = <&kp DLLR>;
            key-positions = <4 17>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        percent {
            bindings = <&kp PRCNT>;
            key-positions = <5 18>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <15 30>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        backslash {
            bindings = <&kp BSLH>;
            key-positions = <16 31>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <17 32>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <18 33>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <7 22>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <8 23>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        asterisk {
            bindings = <&kp STAR>;
            key-positions = <9 24>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        ampersand {
            bindings = <&kp AMPS>;
            key-positions = <10 25>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <22 36>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        hyphen {
            bindings = <&kp MINUS>;
            key-positions = <23 37>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        slash {
            bindings = <&kp FSLH>;
            key-positions = <24 38>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <25 39>;
            require-prior-idle-ms = <150>;
            layers = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BASE";
            bindings = <
&kp TAB       &kp Q        &kp W        &kp E         &kp R          &kp T                              &kp UP                 &kp Y        &kp U          &kp I         &kp O        &kp P                &kp BSPC
&smart_shift  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G                    &kp LEFT  &kp RETURN  &kp RIGHT  &kp H        &hmr RSHIFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMICOLON  &kp SQT
&kp LCTRL     &kp Z        &kp X        &kp C         &kp V          &kp B      &kp C_MUTE              &kp DOWN               &kp N        &kp M          &kp COMMA     &kp DOT      &kp FSLH             &kp ESC
                                        &kp LGUI      &mo 1          &kp SPACE                                                 &lt 3 ENTER  &mo 2          &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        num_sym_layer {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                            &mmv MOVE_UP                     &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &trans
&trans  &trans  &trans  &trans  &trans  &trans            &mmv MOVE_LEFT  &click          &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp GRAVE  &kp LBKT  &kp RBKT  &kp BSLH
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp TILDE  &kp LBRC  &kp RBRC  &kp PIPE
                        &trans  &trans  &trans                                                             &trans     &trans     &trans
            >;

            label = "NUMSYM";
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &kp PG_UP  &kp HOME  &trans                            &mmv MOVE_UP                     &trans    &kp LG(TAB)  &kp LG(LS(TAB))  &kp LG(GRAVE)  &kp LG(LS(GRAVE))  &kp BACKSPACE
&trans  &trans  &trans  &kp PG_DN  &kp END   &trans            &mmv MOVE_LEFT  &click          &mmv MOVE_RIGHT  &kp LEFT  &kp DOWN     &kp UP           &kp RIGHT      &trans             &kp ENTER
&trans  &trans  &trans  &trans     &trans    &trans  &trans                    &mmv MOVE_DOWN                   &trans    &trans       &trans           &trans         &trans             &trans
                        &trans     &trans    &trans                                                             &trans    &trans       &trans
            >;

            label = "NAV";
        };

        fn_layer {
            bindings = <
&trans      &kp F1            &kp F2           &kp F3           &kp F4           &kp F5                                     &mmv MOVE_UP                     &kp F6          &kp F7        &kp F8        &kp F9        &kp F10       &kp F11
&kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_MUTE       &kp C_VOL_DN     &kp C_VOL_UP               &mmv MOVE_LEFT  &click          &mmv MOVE_RIGHT  &m0             &m1           &m2           &m3           &m4           &kp F12
&trans      &rgb_ug RGB_TOG   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans                    &mmv MOVE_DOWN                   &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                               &trans           &trans           &trans                                                                      &trans          &trans        &trans
            >;

            label = "FN";
        };
    };
};
